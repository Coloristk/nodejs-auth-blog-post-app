import { Router } from "express";
import { db } from "../utils/db.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

const authRouter = Router();

// üê® Todo: Exercise #1
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Register ‡∏ï‡∏±‡∏ß User ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Database ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/register", async (req, res) => {
  try {
    const user = {
      username: req.body.username,
      password: req.body.password,
      firstname: req.body.firstname,
      lastname: req.body.lastname,
    };

    const salt = await bcrypt.genSalt(10);

    user.password = await bcrypt.hash(user.password, salt);

    const collection = db.collection("users");
    await collection.insertOne(user);

    // Chatgpt ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    /*     const { username, password, firstname, lastname } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!username || !password || !firstname || !lastname) {
      return res.status(400).json({ message: "All fields are required" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const collection = db.collection("users");
    const existingUser = await collection.findOne({ username });
    if (existingUser) {
      return res.status(409).json({ message: "Username already exists" });
    }

    // ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user object
    const user = {
      username,
      password: hashedPassword,
      firstname,
      lastname,
    }; */

    return res.status(201).json({
      message: "User has been created successfully",
    });
  } catch (error) {
    return res.status(500).json({ message: `${error.message}` });
  }
});

// üê® Todo: Exercise #3
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Login ‡∏ï‡∏±‡∏ß User ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/login", async (req, res) => {
  try {
    // const { username, password } = req.body;

    /* if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    } */

    const user = await db.collection("users").findOne({
      username: req.body.username,
    });

    if (!user) {
      return res.status(404).json({ message: "user not found" });
    }

    const isValidPassword = await bcrypt.compare(
      req.body.password,
      user.password
    );

    if (!isValidPassword) {
      return res.status(401).json({ message: "password is not valid" });
    }
    // ‡πÄ‡∏≠‡∏≤ username , password ‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ ‡∏à‡∏≤‡∏Å client/context/authentication ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î22 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÅ‡∏ô‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    const token = jwt.sign(
      {
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ payload ‡∏Å‡πá‡πÑ‡∏î‡πâ
        id: user._id,
        firstname: user.firstname,
        lastname: user.lastname,
      },
      process.env.SECRET_KEY,
      {
        expiresIn: "900000", // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô minutes(m), hours(h), days(d), years(y) ‡πÑ‡∏î‡πâ
      }
    );

    return res.json({
      message: "login successfully",
      token,
    });
  } catch (error) {
    return res.status(500).json({ message: `${error.message}` });
  }
});

export default authRouter;
